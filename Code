Option Explicit

Dim OldSeatingChart As Range                '座席表（現）のセル範囲
Dim NewSeatingChart As Range                '座席表（新）のセル範囲
Dim OldNeighBoursMap() As Variant           '座席表（現）の隣席マップ（ジャグ配列）
Dim SeatSequenceList() As Variant           '空席サーチの順番表（1次元配列）
Dim ColumnCount As Long                     '列の数
Dim RowCount As Long                        '行の数

Public Sub Main()
    Dim t1 As Single: t1 = Timer
   
    Set OldSeatingChart = ThisWorkbook.Worksheets("座席表（現）").Range("B5:G10")
    Set NewSeatingChart = ThisWorkbook.Worksheets("座席表（新）").Range("B5:G10")
    
    '座席の列、行の数
    ColumnCount = NewSeatingChart.Columns.Count
    RowCount = NewSeatingChart.Rows.Count
    
    '座席表（新）をクリアする
    NewSeatingChart.ClearContents
    NewSeatingChart.Interior.Color = xlNone
    
    '空き席サーチの順番表をランダムに入れ替える
    SeatSequenceList = GenerateSequenceList(NewSeatingChart.Count)
    
    '座席表（新）の席番対応表（現在の席番がどこに移動するか示した対応表）
    Dim NewSeatingMap() As Variant
    ReDim NewSeatingMap(1 To NewSeatingChart.Count)
    
    '座席表（現）の前後左右の席番リストを生成する
    ReDim OldNeighBoursMap(1 To NewSeatingChart.Count)
    Call MakeOldNeighBoursMap
    
    '席替えする
    Call ChangeSeatArrangement(1, NewSeatingMap)
    
    '席替えの結果を座席表（新）に書き出す
    Call PrintNewSeatingChart(NewSeatingMap)
    
    '席替え条件を満たしているか検査をする
    Call CheckNewSeatArrangement(NewSeatingMap)

    t1 = Timer - t1
    Debug.Print "Finished. Time="; t1
End Sub

'席替えをする（再帰を利用）
'席替え条件：全員が違う行列に移動、前後左右は現在と違う人
'引数： IsReEntry  False=初回呼び出し、True：再呼び出し
Private Function ChangeSeatArrangement(ByVal SeatNumber As Long, ByRef NewSeatingMap() As Variant, _
                                       Optional IsReEntry As Boolean = False) As Boolean
    
    Static remainingSeats As Long, callCount As Long
    If IsReEntry = False Then
        remainingSeats = UBound(NewSeatingMap)
        callCount = 0
    End If
    
    'この再帰関数の呼び出し回数を更新する
    callCount = callCount + 1
    
    '残席がゼロ（席替えが完了）なら終了する
    If remainingSeats = 0 Then ChangeSeatArrangement = True: Exit Function
    
    Dim newSeatNumber As Long
    Dim i As Variant
    For Each i In SeatSequenceList
        
        newSeatNumber = CLng(i)
        
        '空席、かつ現在の席と異なる行・列か？
        If NewSeatingMap(newSeatNumber) = "" And IsSameLines(newSeatNumber, SeatNumber) = False Then
            If IsOldNeighbourAround(SeatNumber, newSeatNumber, NewSeatingMap) = False Then
                '座席を仮指定する
                NewSeatingMap(newSeatNumber) = SeatNumber
                remainingSeats = remainingSeats - 1
                If ChangeSeatArrangement(SeatNumber + 1, NewSeatingMap, True) Then
                    ChangeSeatArrangement = True
                    Exit Function
                Else
                    '座席の仮指定を取り消す
                    NewSeatingMap(newSeatNumber) = ""
                    remainingSeats = remainingSeats + 1
                End If
            End If
        End If
    
    Next
    ChangeSeatArrangement = False

End Function

'二つの席番が同じ行または列になっているか検査する
Private Function IsSameLines(SeatNumber1 As Long, SeatNumber2 As Long) As Boolean
    IsSameLines = True
    If Int((SeatNumber1 - 1) / ColumnCount) = Int((SeatNumber2 - 1) / ColumnCount) Then Exit Function
    If ((SeatNumber1 - 1) Mod ColumnCount) = ((SeatNumber2 - 1) Mod ColumnCount) Then Exit Function
    IsSameLines = False
End Function

'前後左右に現在と同じ人が既に配置されているかチェックする
Private Function IsOldNeighbourAround(ByVal OldSeatNumber As Variant, _
                                      ByVal newSeatNumber As Variant, _
                                      ByRef NewSeatingMap() As Variant) As Boolean
   
    Dim NewNeighbours() As Variant
    Dim k As Long: k = 0
    ReDim NewNeighbours(1 To 4)
        
    Dim newRow As Long, newColumn As Long
    newRow = Int((newSeatNumber - 1) / ColumnCount) + 1
    newColumn = ((newSeatNumber - 1) Mod ColumnCount) + 1
        
    If newRow > 1 Then k = k + 1: NewNeighbours(k) = NewSeatingMap(newSeatNumber - ColumnCount)
    If newRow < RowCount Then k = k + 1: NewNeighbours(k) = NewSeatingMap(newSeatNumber + ColumnCount)
    If newColumn > 1 Then k = k + 1: NewNeighbours(k) = NewSeatingMap(newSeatNumber - 1)
    If newColumn < ColumnCount Then k = k + 1: NewNeighbours(k) = NewSeatingMap(newSeatNumber + 1)
    ReDim Preserve NewNeighbours(1 To k)

    If k = 0 Then IsOldNeighbourAround = False: Exit Function

    Dim newNeighbour As Variant, oldNeighbour As Variant
    For Each newNeighbour In NewNeighbours
        For Each oldNeighbour In OldNeighBoursMap(OldSeatNumber)
            If newNeighbour = oldNeighbour Then IsOldNeighbourAround = True: Exit Function
        Next
    Next
    IsOldNeighbourAround = False

End Function

'座席表（新）に席替えの結果を表示する
Private Sub PrintNewSeatingChart(ByRef NewSeatingMap() As Variant)
    Dim newSeatNumber As Variant, OldSeatNumber As Variant
    For newSeatNumber = 1 To UBound(NewSeatingMap)
        Dim newRow As Long, newColumn As Long
        Dim oldRow As Long, oldColumn As Long
        
        newRow = Int((newSeatNumber - 1) / ColumnCount) + 1
        newColumn = ((newSeatNumber - 1) Mod ColumnCount) + 1
        OldSeatNumber = NewSeatingMap(newSeatNumber)
        If OldSeatNumber = "" Then
            NewSeatingChart.Item(newRow, newColumn).Value = ""
        Else
            oldRow = Int((OldSeatNumber - 1) / ColumnCount) + 1
            oldColumn = ((OldSeatNumber - 1) Mod ColumnCount) + 1
            NewSeatingChart.Item(newRow, newColumn).Value = _
                    OldSeatingChart.Item(oldRow, oldColumn).Value
        End If
    Next
End Sub

'席替え条件を満たしているか検査をする。前後左右が前回と同じ場合は黄色でハッチング
Private Sub CheckNewSeatArrangement(ByRef NewSeatingMap() As Variant)
    Dim newSeatNumber As Long, OldSeatNumber As Long
    For newSeatNumber = 1 To UBound(NewSeatingMap)
        OldSeatNumber = NewSeatingMap(newSeatNumber)
        If IsOldNeighbourAround(OldSeatNumber, newSeatNumber, NewSeatingMap) Then
            Dim newRow As Long, newColumn As Long
            newRow = Int((newSeatNumber - 1) / ColumnCount) + 1
            newColumn = ((newSeatNumber - 1) Mod ColumnCount) + 1
            NewSeatingChart.Item(newRow, newColumn).Interior.Color = rgbYellow
        End If
    Next
End Sub

'元の座席表の前後左右の関係をジャグ配列にする
Private Sub MakeOldNeighBoursMap()
    Dim OldNeighbours() As Long
    Dim i As Long
    For i = 1 To UBound(OldNeighBoursMap)
        Dim r As Long, c As Long
        r = Int((i - 1) / ColumnCount) + 1
        c = ((i - 1) Mod ColumnCount) + 1
        
        ReDim OldNeighbours(1 To 4)
        Dim k As Long: k = 0
        If r > 1 Then k = k + 1: OldNeighbours(k) = i - ColumnCount
        If r < RowCount Then k = k + 1: OldNeighbours(k) = i + ColumnCount
        If c > 1 Then k = k + 1: OldNeighbours(k) = i - 1
        If c < ColumnCount - 1 Then k = k + 1: OldNeighbours(k) = i + 1
        ReDim Preserve OldNeighbours(1 To k)
        OldNeighBoursMap(i) = OldNeighbours
    Next
End Sub

'１から始まる連番をランダムに入れ換えて順番表(SequenceList)を生成する
'例えば、1-2-3-4-5-6 の連番を 5-2-4-1-6-3 のように生成する
Private Function GenerateSequenceList(Size As Long) As Variant()
    Dim arr() As Variant, ready() As Boolean, num As Long
    ReDim arr(1 To Size)
    ReDim ready(1 To Size)
    Dim i As Long
    For i = 1 To Size
        Do
            num = Int(Rnd * Size) + 1
            If ready(num) = False Then
                ready(num) = True
                arr(i) = num
                Exit Do
            End If
        Loop
    Next
    GenerateSequenceList = arr
End Function

'-------------------------------------------------------------------------------
' End of Module
'-------------------------------------------------------------------------------
